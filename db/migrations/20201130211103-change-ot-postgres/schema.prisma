// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @default(autoincrement()) @id
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("user")
  sessions       Session[]
  problems       Problem[]
  solutions      Solution[]
}

model Session {
  id                 Int       @default(autoincrement()) @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Course {
  id        Int       @default(autoincrement()) @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    
  code      String    
  desc      String?   
  problems  Problem[] 
}

model Problem {
  id        Int        @default(autoincrement()) @id
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     
  body      String     
  solutions Solution[] 
  user      User?       @relation(fields: [userId], references: [id])
  userId    Int?        
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  Int        
}

model Solution {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String   
  graded    Boolean  @default(false)
  grade     Int?      
  feedback  String?
  endorsed  Boolean  @default(false)
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int      
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?      
  completed Boolean  @default(true) 
}
